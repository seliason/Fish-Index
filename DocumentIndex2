/* this will be the document index
*/
import java.util.ArrayList;

public class DocumentIndex extends ArrayList<IndexEntry>
//*everywhere we write words, we could write this.get(i).getWord()

private ArrayList<String> words;

public DocumentIndex()
{
  super(20);
}

public DocumentIndex(int capacity)
{
  super(capacity);
}

//* declare if word is found or if inserted
*in AddWord, use if a word is found or inserted
*MAKE SURE YOU STILL ADDNUM in AddWord

private int foundOrInserted(String word)
    // I added the two variables for found or inserted, does this make sense? - Taylor
    boolean found = false;
    boolean inserted = false;
    for (int i = 0; i < words.size(); i++)
      {
       if (this.get(i).getWord().equals(word.toUpperCase()))
        { 
        // HERE IS ANOTHER INSTANCE OF THE "WORDS" ARRAYLIST - DB
        // changed to get rid of words - Taylor
            found = true;
            return (this.get(i));
        }
        else
          {
          // *****YOU DONT' NEED THIS FOUNDORINSERTED IS SIMPLY TRYING TO FIND WHERE THIS WORD GOES.
          // I deleted the line that created a new index entry - Taylor
            for (int i = 0; i < words.size(); i++)
              {
              inserted = true;
              if (word.compareToIgnoreCase(string(i))>0)
                  { 
                   words.add(i,word);
                }
              else 
              {
                words.add(word);
              }
            }
          return words.indexOf(word);
        }
        //***** YOU DO NEED TO WORRY ABOUT WHAT IF YOU GET TO THE END AND YOU HAVEN'T FOUND WHERE TO PUT IT.
    }
  
/*this is a method that will add num to the IndexEntry for word by calling IndexEntry's add(num) method
*if word is not yet in this Document Index, the method first creates a new IndexEntry for word and inserts it into the
*list alphabetically
*@param String word
*@param int num
*/
public void addWord(String word, int num)
  //where does this word go?
  int whereDoesItGo = foundOrInserted(word);
  IndexEntry currentEntry = this.get(whereDoesItGo);
  String label = currentEntry.getWord();
  if (word.equals(label))
  {
      currentEntry.add(num);
  }
  else
  {
      IndexEntry newEntry = new IndexEnty(word);
      newEntry.add(num);
      this.add(whereDoesItGo,newEntry);
  }
  
    

/*this method extracts all the words from str
* and for each word calls addWord(Word, num)
*@param String str, int num
*/
public void addAllWords(String line, int lineNum)
    public String[] words =line.split("\\W+");
    
  for each (int i = 0; i<words.length(); i++)
   {
   // WARNING!!!!! 
   //there is some confusion here about arrays and arrayLists
   // arrays are accessed using the [] and in arrayLists we use the get(int n) methdod.
   //WARNING!!!!
   // I changed this, this is an array, not an array list, right? -Taylor
      word[i].addWord();
      
    }
