/**
* This is the Document Index for the Fish-Index simulator
*it represents the entire index for the document, the list of all index entries. 
* @author Taylor R.
* @author Sonja E.
* @date 11.7.14
* @version 0.1
*/

import java.util.ArrayList;

public class DocumentIndex extends ArrayList<IndexEntry>  {

private ArrayList<String> words;

/*
* The following two constructors create ArrayLists, one with a default capacity and one with given capacity
*/

public DocumentIndex()
{
  super(20);
}

public DocumentIndex(int capacity)
{
  super(capacity);
}

/*
*this method will compare the given word (case-blind) to the words in the IndexEntry objects
*it will find the place where the new word fits alphabetically
*if the word does not already exist in IndexEntry, it will return the location of the last space in the arraylist
*which is the size of the arraylist. 
*@return int 
*the int will describe the location of the word in the index
*/

private int foundOrInserted(String word) {
   
    for (int i = 0; i < this.size(); i++)
      {
       if (this.get(i).getWord().compareTo(word.toUpperCase())>=0)
        { 
            return i;
        }
      }
     return this.size();
     }
        
    
  
/*this is a method that will add num to the IndexEntry for word by calling IndexEntry's add(num) method
*if word is not yet in this Document Index, the method first creates a new IndexEntry for word and inserts it into the
*list alphabetically
*@param String word
*@param int num
*/
public void addWord(String word, int num) {
  //where does this word go
  int whereDoesItGo = foundOrInserted(word);
  if (whereDoesItGo==this.size())
  {
      IndexEntry newEntry = new IndexEntry(word);
      newEntry.add(num);
      this.add(whereDoesItGo,newEntry);
  }
  IndexEntry currentEntry = this.get(whereDoesItGo);
  String label = currentEntry.getWord();
  if (word.toUpperCase().equals(label))
  {
      currentEntry.add(num);
  }
  else
  {
      IndexEntry newEntry = new IndexEntry(word);
      newEntry.add(num);
      this.add(whereDoesItGo,newEntry);
  }
  }
    

/*this method extracts all the words from str
* and for each word calls addWord(Word, num)
*@param String str 
*@param int num
*/
public void addAllWords(String line, int lineNum) {
    String[] words =line.split("\\W+");
    
  for (String word : words){
   {
      if (!(word.equals("")))
          {
  
          this.addWord(word,lineNum);
      }
    }
  }
}
}
